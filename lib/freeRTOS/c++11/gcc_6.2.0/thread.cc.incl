// thread -*- C++ -*-

// Copyright (C) 2008-2016 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

//#define _GLIBCXX_THREAD_ABI_COMPAT 1
#include <cerrno>
#include <system_error>
#include <thread>
//#include <cxxabi_forced.h>

#if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1)

#if defined(_GLIBCXX_USE_GET_NPROCS)
#include <sys/sysinfo.h>
#define _GLIBCXX_NPROCS get_nprocs()
#elif defined(_GLIBCXX_USE_PTHREADS_NUM_PROCESSORS_NP)
#define _GLIBCXX_NPROCS pthread_num_processors_np()
#elif defined(_GLIBCXX_USE_SYSCTL_HW_NCPU)
#include <stddef.h>
#include <sys/sysctl.h>
static inline int get_nprocs() {
    int count;
    size_t size = sizeof(count);
    int mib[] = {CTL_HW, HW_NCPU};
    if (!sysctl(mib, 2, &count, &size, NULL, 0)) return count;
    return 0;
}
#define _GLIBCXX_NPROCS get_nprocs()
#elif defined(_GLIBCXX_USE_SC_NPROCESSORS_ONLN)
#include <unistd.h>
#define _GLIBCXX_NPROCS sysconf(_SC_NPROCESSORS_ONLN)
#elif defined(_GLIBCXX_USE_SC_NPROC_ONLN)
#include <unistd.h>
#define _GLIBCXX_NPROCS sysconf(_SC_NPROC_ONLN)
#else
#define _GLIBCXX_NPROCS 0
#endif

#ifndef _GLIBCXX_USE_NANOSLEEP
#ifdef _GLIBCXX_HAVE_SLEEP
#include <unistd.h>
#elif defined(_GLIBCXX_HAVE_WIN32_SLEEP)
#include <windows.h>
#else
#error "No sleep function known for this target"
#endif
#endif

volatile static size_t defaultStackSize = configMINIMAL_STACK_SIZE;
namespace microhal {
namespace os {
void setDefaultStackSize(size_t size) noexcept {
    defaultStackSize = size;  
}
size_t getDefaultStackSize() noexcept {
    return defaultStackSize;
}
}  // namespace os
}  // namesapce microhal

namespace std _GLIBCXX_VISIBILITY(default) {
    class RAIITaskDelete {
     public:
        constexpr explicit RAIITaskDelete() noexcept {}
        ~RAIITaskDelete() { vTaskDelete(NULL); }
    };
    extern "C" {
    static void execute_native_thread_routine(void* __p) {
        RAIITaskDelete
            t;  // in FreeRTOS we have delete task before living task function, use RAII class to call delete function at the end of this function
        thread::_State_ptr __t{static_cast<thread::_State*>(__p)};

        __try {
            __t->_M_run();
#ifdef __MICROHAL
            taskENTER_CRITICAL();
            __t->microhalJoin.running = false;

            if (__t->microhalJoin.waitingThread) {
                taskEXIT_CRITICAL();
                vTaskResume(__t->microhalJoin.waitingThread);
            } else {
                taskEXIT_CRITICAL();
            }
#endif
        }
        __catch(const __cxxabiv1::__forced_unwind&) { __throw_exception_again; }
        __catch(...) { std::terminate(); }

        // return nullptr;
    }

#if _GLIBCXX_THREAD_ABI_COMPAT
    static void execute_native_thread_routine_compat(void* __p) {
        RAIITaskDelete
            t;  // in FreeRTOS we have delete task before living task function, use RAII class to call delete function at the end of this function
        thread::_Impl_base* __t = static_cast<thread::_Impl_base*>(__p);
        thread::__shared_base_type __local;
        // Now that a new thread has been created we can transfer ownership of
        // the thread state to a local object, breaking the reference cycle
        // created in thread::_M_start_thread.
        __local.swap(__t->_M_this_ptr);

        __try {
            __t->_M_run();
        }
        __catch(const __cxxabiv1::__forced_unwind&) { __throw_exception_again; }
        __catch(...) { std::terminate(); }

        //  return nullptr;
    }
#endif
    }  // extern "C"

    _GLIBCXX_BEGIN_NAMESPACE_VERSION

    thread::_State::~_State() = default;

    void thread::join() {
        int __e = EINVAL;

        if (_M_id != id()) {
            //__e = __gthread_join(_M_id._M_thread, 0);

            TaskHandle_t this_thread_id = xTaskGetCurrentTaskHandle();
            // detect self join
            if (this_thread_id != _M_id._M_thread) {
                taskENTER_CRITICAL();
                if (state == nullptr) std::terminate();  // microhal internal error
                if (state->microhalJoin.running == true) {
                    if (state->microhalJoin.addWaitingTask(this_thread_id)) {
                        taskEXIT_CRITICAL();
                        while (state->microhalJoin.running == true) {
                            vTaskSuspend(NULL);  // suspend this thread
                        }

                        __e = 0;  // no error
                    }
                } else {
                    taskEXIT_CRITICAL();
                    __e = 0;  // no error
                }
            }
        }

        if (__e) __throw_system_error(__e);

        _M_id = id();
    }

    void thread::detach() {
        int __e = EINVAL;

        if (_M_id != id()) {
            state = nullptr;
            __e = 0;
        }

        if (__e) __throw_system_error(__e);

        _M_id = id();
    }

	void thread::_M_start_thread(_State_ptr state, void (*)()) {
		_M_start_thread(defaultStackSize, "std", configMAX_PRIORITIES / 2, std::move(state), nullptr);
	}

    void thread::_M_start_thread(size_t stackSize, const char *name, int priority, _State_ptr state, void (*)()) {    	
        // const int err = __gthread_create(&_M_id._M_thread, &execute_native_thread_routine, state.get());
        this->state = state.get();
        stackSize = (stackSize % 4) ? stackSize / 4 : stackSize / 4 + 1;  // freeRTOS is assaining stack in words (4bytes), so we need to divide required stack
                                                                          // size by 4 to get correct amount of stack memory
        BaseType_t err = xTaskCreate(&execute_native_thread_routine, name, stackSize, state.get(), priority, &_M_id._M_thread);
        if (err != pdPASS) __throw_system_error(err);
        state.release();
    }

#if _GLIBCXX_THREAD_ABI_COMPAT
    void thread::_M_start_thread(__shared_base_type __b) {
        if (!__gthread_active_p())
#if __cpp_exceptions
            throw system_error(make_error_code(errc::operation_not_permitted), "Enable multithreading to use std::thread");
#else
            __throw_system_error(int(errc::operation_not_permitted));
#endif

        _M_start_thread(std::move(__b), nullptr);
    }

    void thread::_M_start_thread(__shared_base_type __b, void (*)()) {
        auto ptr = __b.get();
        // Create a reference cycle that will be broken in the new thread.
        ptr->_M_this_ptr = std::move(__b);
        // int __e = __gthread_create(&_M_id._M_thread, &execute_native_thread_routine_compat, ptr);
        BaseType_t __e = xTaskCreate(&execute_native_thread_routine, NULL, defaultStackSize, __b.get(), configMAX_PRIORITIES / 2, &_M_id._M_thread);
        if (__e != pdPASS) {
            ptr->_M_this_ptr.reset();  // break reference cycle, destroying *ptr.
            __throw_system_error(__e);
        }
    }
#endif

    unsigned int thread::hardware_concurrency() noexcept { return 1; }

    _GLIBCXX_END_NAMESPACE_VERSION

    namespace this_thread {
    _GLIBCXX_BEGIN_NAMESPACE_VERSION

    void __sleep_for(chrono::seconds __s, chrono::nanoseconds __ns) {
        unsigned long ms = __ns.count() / 1000000;
        if (__ns.count() > 0 && ms == 0) ms = 1;

        vTaskDelay((chrono::milliseconds(__s).count() + ms) * configTICK_RATE_HZ / 1000);
    }

    _GLIBCXX_END_NAMESPACE_VERSION
    }

}  // namespace std

#endif  // _GLIBCXX_HAS_GTHREADS && _GLIBCXX_USE_C99_STDINT_TR1
